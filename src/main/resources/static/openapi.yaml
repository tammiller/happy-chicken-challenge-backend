---
openapi: 3.0.0
info:
  title: Happy Chicken API
  version: 1.0.0
  description: An API for managing daily vegan entries and challenges.
paths:
  /users:
    post:
      operationId: signInUser
      summary: Signin using given email id and name, create if user does not exist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignInRequest"
      responses:
        "201":
          description: User signed in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Check your request data.
  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        description: The internal unique identifier of user
        schema:
          type: string
    get:
      operationId: getUser
      summary: Get User details
      responses:
        "200":
          description: User details with the identity they used for signup
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User is not found
  /challenges:
    post:
      operationId: createChallenge
      summary: Create Challenge
      description: Create a new challenge.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Challenge"
      responses:
        "201":
          description: Challenge created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Challenge"
        "400":
          description: Bad request. Check your request data.
  "/challenges/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of the challenge.
        schema:
          type: string
    get:
      operationId: getChallengesForUser
      summary: Get Challenges
      description: Retrieve information about a specific challenge.
      responses:
        "200":
          description: Challenge information retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Challenge"
        "404":
          description: Challenge not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/challenges/{userId}/{challengeId}":
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of the challenge.
        schema:
          type: string
      - name: challengeId
        in: path
        required: true
        description: The unique identifier of the challenge.
        schema:
          type: string
    get:
      operationId: getChallenge
      summary: Get Challenge
      description: Retrieve information about a specific challenge.
      responses:
        "200":
          description: Challenge information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Challenge"
        "404":
          description: Challenge not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      operationId: updateChallenge
      summary: Update Challenge
      description: Update an existing challenge by its ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Challenge"
      responses:
        "200":
          description: Challenge updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Challenge"
        "400":
          description: Bad request. Check your request data.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Challenge not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      operationId: deleteChallenge
      summary: Delete Challenge
      description: Delete a specific challenge by its ID.
      responses:
        "204":
          description: Challenge deleted successfully.
        "404":
          description: Challenge not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/challenges/{challengeId}/daily-entries":
    parameters:
      - name: challengeId
        in: path
        required: true
        description: The unique identifier of the challenge.
        schema:
          type: string
    get:
      operationId: getChallengeEntriesForUser
      summary: Get Daily Entries for a Challenge
      description: Retrieve a list of daily entries for a specific challenge.
      responses:
        "200":
          description: List of daily entries for the challenge successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyEntry"
        "404":
          description: Challenge not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      operationId: addDailyEntryForChallenge
      summary: Create Daily Entry for Challenge
      description: Create a new daily entry for a specific challenge.
      parameters:
        - name: challengeId
          in: path
          required: true
          description: The unique identifier of the challenge.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DailyEntry"
      responses:
        "201":
          description: Daily entry created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyEntry"
        "400":
          description: Bad request. Check your request data.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/challenges/{challengeId}/daily-entries/{entryId}":
    parameters:
      - name: challengeId
        in: path
        required: true
        description: The unique identifier of the challenge.
        schema:
          type: string
      - name: entryId
        in: path
        required: true
        description: The unique identifier of the daily entry within the challenge.
        schema:
          type: string
    put:
      operationId: updateDailyEntry
      summary: Update Daily Entry
      description: Update an existing daily entry within a challenge.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DailyEntry"
      responses:
        "200":
          description: Daily entry updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyEntry"
        "400":
          description: Bad request. Check your request data.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Daily entry not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      operationId: deleteDailyEntry
      summary: Delete Daily Entry
      description: Delete a specific daily entry within a challenge by its ID.
      responses:
        "204":
          description: Daily entry deleted successfully.
        "404":
          description: Daily entry not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    Challenge:
      type: object
      properties:
        challenge_id:
          type: string
          format: uuid
          description: Unique identifier for the challenge.
        user_id:
          type: string
          format: uuid
        start:
          type: string
          format: date
        numberOfDays:
          type: integer
        status:
          type: string
          enum:
            - ACTIVE
            - EXPIRED
            - ENDED
        dailyEntries:
          type: array
          items:
            $ref: "#/components/schemas/DailyEntry"
      required:
        - name
        - description
    DailyEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the daily entry.
        date:
          type: string
          format: date
          description: Date of the daily entry in YYYY-MM-DD format.
        status:
          type: string
          enum:
            - GOOD
            - NEUTRAL
            - BAD
          description: The status for the daily entry.
      required:
        - date
        - status
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user.
        name:
          type: string
          description: Name of the user.
        email_id:
          type: string
          format: email
          description: Email account used by user in signing up
      required:
        - id
        - name
    UserSignInRequest:
      type: object
      properties:
        email_id:
          type: string
          format: email
          description: User's email account to link to their voyager account
        name:
          type: string
          description: Name of the user
      required:
        - email_id
        - name
    Problem:
      type: object
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          description: The HTTP status code generated by the origin server.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
      required:
        - type
        - title
        - status